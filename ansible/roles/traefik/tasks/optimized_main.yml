---
# Optimized tasks file for traefik - improved execution order and parallelization
# This version groups independent tasks and uses parallel execution where possible

# Phase 1: Critical validations first (fail fast)
- name: Validate critical Traefik configuration variables
  include_tasks: "{{ role_path }}/../common/tasks/variable_validation.yml"
  vars:
    role_name: "traefik"
    required_variables:
      - "traefik_domain"
      - "traefik_data_dir"
      - "traefik_user"
      - "traefik_group"
    sensitive_variables:
      - "traefik_dashboard_password"
    custom_validations:
      - name: "traefik_domain"
        validation: "traefik_domain | regex_search('^[a-zA-Z0-9.-]+$')"
        error_message: "traefik_domain must be a valid domain name"
      - name: "traefik_data_dir"
        validation: "traefik_data_dir | regex_search('^/')"
        error_message: "traefik_data_dir must be an absolute path"

# Phase 2: Parallel prerequisite installations
- name: Install prerequisites in parallel
  block:
    # Fast setup tasks that don't require network
    - name: Setup Traefik user and directories (standardized)
      include_tasks: "{{ role_path }}/../common/tasks/setup_service_user.yml"
      vars:
        service_name: "traefik"
        service_user: "{{ traefik_user }}"
        service_group: "{{ traefik_group }}"
        service_home: "{{ traefik_data_dir }}"
        service_shell: "/bin/bash"
        additional_groups: ["docker"]
        service_directories:
          - "{{ traefik_data_dir }}"
          - "{{ traefik_config_dir }}"
          - "{{ traefik_certs_dir }}"
          - "{{ traefik_logs_dir }}"
        directory_mode: "0755"

    # Parallel package operations
    - name: Parallel package installation
      block:
        - name: Install system packages
          package:
            name: "{{ traefik_system_packages }}"
            state: present
            update_cache: true
          become: true
          async: 300
          poll: 0
          register: system_packages_job
          when: not ansible_check_mode

        - name: Install Python system packages
          package:
            name: "{{ traefik_system_python_packages }}"
            state: present
            update_cache: true
          become: true
          async: 300
          poll: 0
          register: python_packages_job
          ignore_errors: true
          when: not ansible_check_mode

        # Wait for parallel package installations
        - name: Wait for system packages installation
          async_status:
            jid: "{{ system_packages_job.ansible_job_id }}"
          register: system_packages_result
          until: system_packages_result.finished
          retries: 60
          delay: 5
          when: system_packages_job is defined and not ansible_check_mode

        - name: Wait for Python packages installation
          async_status:
            jid: "{{ python_packages_job.ansible_job_id }}"
          register: python_packages_result
          until: python_packages_result.finished
          retries: 60
          delay: 5
          when: python_packages_job is defined and not ansible_check_mode

    # Fallback pip installation only if system packages failed
    - name: Install Python dependencies via pip (fallback)
      pip:
        name: ["bcrypt", "docker"]
        state: present
        executable: pip3
        break_system_packages: yes
      become: true
      when: python_packages_result is defined and python_packages_result.failed and not ansible_check_mode

  when: not ansible_check_mode

# Phase 3: Extended validation (after basic setup is confirmed working)
- name: Extended Traefik configuration validation
  include_tasks: "{{ role_path }}/../common/tasks/variable_validation.yml"
  vars:
    role_name: "traefik-extended"
    required_variables:
      - "traefik_dashboard_domain"
      - "traefik_config_dir"
      - "traefik_certs_dir"
      - "traefik_logs_dir"
      - "traefik_network_name"
    conditional_variables:
      - condition: "traefik_acme_enabled | default(false)"
        variables: 
          - "traefik_acme_email"
          - "traefik_acme_ca_server"
      - condition: "traefik_dashboard_auth_enabled | default(false)"
        variables:
          - "traefik_dashboard_password"
          - "traefik_dashboard_username"
      - condition: "traefik_certificate_type == 'custom'"
        variables:
          - "traefik_certificate_files"
    custom_validations:
      - name: "traefik_dashboard_domain"
        validation: "traefik_dashboard_domain | regex_search('^[a-zA-Z0-9.-]+$')"
        error_message: "traefik_dashboard_domain must be a valid domain name"
      - name: "traefik_acme_email"
        condition: "traefik_acme_enabled | default(false)"
        validation: "traefik_acme_email | regex_search('@')"
        error_message: "traefik_acme_email must be a valid email address when ACME is enabled"
      - name: "traefik_config_dir"
        validation: "traefik_config_dir | regex_search('^/')"
        error_message: "traefik_config_dir must be an absolute path starting with '/'"
      - name: "traefik_certs_dir"
        validation: "traefik_certs_dir | regex_search('^/')"
        error_message: "traefik_certs_dir must be an absolute path starting with '/'"
      - name: "traefik_logs_dir"
        validation: "traefik_logs_dir | regex_search('^/')"
        error_message: "traefik_logs_dir must be an absolute path starting with '/'"
      - name: "traefik_web_port"
        validation: "traefik_web_port | int > 0 and traefik_web_port | int <= 65535"
        error_message: "traefik_web_port must be a valid port number (1-65535)"
      - name: "traefik_websecure_port"
        validation: "traefik_websecure_port | int > 0 and traefik_websecure_port | int <= 65535"
        error_message: "traefik_websecure_port must be a valid port number (1-65535)"
      - name: "traefik_dashboard_port"
        validation: "traefik_dashboard_port | int > 0 and traefik_dashboard_port | int <= 65535"
        error_message: "traefik_dashboard_port must be a valid port number (1-65535)"
      - name: "traefik_certificate_type"
        validation: "traefik_certificate_type in ['acme', 'custom', 'none']"
        error_message: "traefik_certificate_type must be one of: acme, custom, none"
      - name: "traefik_log_level"
        validation: "traefik_log_level in ['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL', 'PANIC']"
        error_message: "traefik_log_level must be one of: DEBUG, INFO, WARN, ERROR, FATAL, PANIC"

# Phase 4: Parallel verification and Docker setup
- name: Parallel verification and Docker setup
  block:
    # Verify Python dependencies in parallel
    - name: Verify Python bcrypt installation
      ansible.builtin.command: python3 -c "import bcrypt; print('bcrypt is available')"
      register: bcrypt_check
      changed_when: false
      async: 30
      poll: 0
      when: not ansible_check_mode

    - name: Verify Python docker installation
      ansible.builtin.command: python3 -c "import docker; print('docker is available')"
      register: docker_python_check
      changed_when: false
      async: 30
      poll: 0
      when: not ansible_check_mode

    # Docker setup in parallel
    - name: Ensure Docker is running
      systemd:
        name: docker
        state: started
        enabled: true
      become: true
      async: 60
      poll: 0
      register: docker_service_job
      when: traefik_ensure_docker_installed | default(true) and not ansible_check_mode

    - name: Verify Docker Compose availability
      command: docker compose version
      register: docker_compose_check
      changed_when: false
      ignore_errors: true
      async: 30
      poll: 0
      when: traefik_ensure_docker_installed | default(true) and not ansible_check_mode

    # Wait for parallel operations
    - name: Wait for bcrypt verification
      async_status:
        jid: "{{ bcrypt_check.ansible_job_id }}"
      register: bcrypt_result
      until: bcrypt_result.finished
      retries: 10
      delay: 3
      when: bcrypt_check.ansible_job_id is defined

    - name: Wait for docker verification
      async_status:
        jid: "{{ docker_python_check.ansible_job_id }}"
      register: docker_python_result
      until: docker_python_result.finished
      retries: 10
      delay: 3
      when: docker_python_check.ansible_job_id is defined

    - name: Wait for Docker service
      async_status:
        jid: "{{ docker_service_job.ansible_job_id }}"
      register: docker_service_result
      until: docker_service_result.finished
      retries: 20
      delay: 3
      when: docker_service_job.ansible_job_id is defined

  rescue:
    - name: Handle verification failures
      include_tasks: "{{ role_path }}/../common/tasks/failure_notification.yml"
      vars:
        notification_type: "error"
        operation_name: "Traefik Prerequisites Verification"
        error_message: "Python dependencies or Docker verification failed"
        troubleshooting_steps:
          - "Install bcrypt: pip3 install bcrypt"
          - "Install docker: pip3 install docker"
          - "Verify Docker daemon is running"
        should_fail: true

# Phase 5: Infrastructure setup (requires working Docker)
- name: Setup Docker infrastructure
  block:
    # These can run in parallel
    - name: Create Docker network for Traefik
      community.docker.docker_network:
        name: "{{ traefik_network_name }}"
        state: present
      async: 60
      poll: 0
      register: network_job

    - name: Determine firewall TCP ports for Traefik
      set_fact:
        traefik_firewall_tcp_ports: "{{ ((iptables_allowed_tcp_ports | default([22, 80, 443])) + [traefik_web_port, traefik_websecure_port] + (traefik_dashboard_expose_port | default(false) | ternary([traefik_dashboard_port], []))) | unique }}"
      when: traefik_configure_firewall | default(true)

    # Wait for network creation
    - name: Wait for Docker network creation
      async_status:
        jid: "{{ network_job.ansible_job_id }}"
      register: network_result
      until: network_result.finished
      retries: 20
      delay: 3
      when: network_job.ansible_job_id is defined

  when: not ansible_check_mode

# Phase 6: Configuration and deployment (sequential, depends on infrastructure)
- name: Configure and deploy Traefik
  block:
    - name: Set ownership of Traefik directories
      file:
        path: "{{ item }}"
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        recurse: true
      loop:
        - "{{ traefik_data_dir }}"
        - "{{ traefik_config_dir }}"
        - "{{ traefik_certs_dir }}"
        - "{{ traefik_logs_dir }}"
      become: true

    - name: Generate bcrypt password hash for dashboard authentication
      shell: |
        python3 -c "import bcrypt; print(bcrypt.hashpw('{{ traefik_dashboard_password | default('changeme') }}'.encode('utf-8'), bcrypt.gensalt()).decode('utf-8'))"
      register: traefik_password_bcrypt
      when: traefik_dashboard_auth_enabled and traefik_dashboard_password is defined
      changed_when: false
      no_log: true
      ignore_errors: true

    # These configuration tasks can run in parallel
    - name: Create Traefik configuration files in parallel
      block:
        - name: Create Traefik static configuration file
          template:
            src: traefik.yml.j2
            dest: "{{ traefik_data_dir }}/traefik.yml"
            owner: "{{ traefik_user }}"
            group: "{{ traefik_group }}"
            mode: '0644'
          become: true
          async: 60
          poll: 0
          register: static_config_job
          notify: restart traefik

        - name: Create dynamic configuration file
          template:
            src: dynamic.yml.j2
            dest: "{{ traefik_config_dir }}/dynamic.yml"
            owner: "{{ traefik_user }}"
            group: "{{ traefik_group }}"
            mode: '0644'
          become: true
          async: 60
          poll: 0
          register: dynamic_config_job
          notify: restart traefik

        - name: Create middlewares configuration file
          template:
            src: middlewares.yml.j2
            dest: "{{ traefik_config_dir }}/middlewares.yml"
            owner: "{{ traefik_user }}"
            group: "{{ traefik_group }}"
            mode: '0644'
          become: true
          async: 60
          poll: 0
          register: middlewares_config_job
          notify: restart traefik

        # Wait for configuration file creation
        - name: Wait for static configuration
          async_status:
            jid: "{{ static_config_job.ansible_job_id }}"
          register: static_config_result
          until: static_config_result.finished
          retries: 20
          delay: 3
          when: static_config_job.ansible_job_id is defined

        - name: Wait for dynamic configuration
          async_status:
            jid: "{{ dynamic_config_job.ansible_job_id }}"
          register: dynamic_config_result
          until: dynamic_config_result.finished
          retries: 20
          delay: 3
          when: dynamic_config_job.ansible_job_id is defined

        - name: Wait for middlewares configuration
          async_status:
            jid: "{{ middlewares_config_job.ansible_job_id }}"
          register: middlewares_config_result
          until: middlewares_config_result.finished
          retries: 20
          delay: 3
          when: middlewares_config_job.ansible_job_id is defined

    - name: Create ACME certificates file with correct permissions
      file:
        path: "{{ traefik_certs_dir }}/acme.json"
        state: touch
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        mode: '0600'
      become: true
      when: traefik_certificate_type == 'acme' and traefik_acme_enabled

    - name: Create Traefik docker-compose file
      template:
        src: docker-compose.yml.j2
        dest: "{{ traefik_data_dir }}/docker-compose.yml"
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        mode: '0644'
      become: true
      notify: restart traefik

  when: not ansible_check_mode

# Phase 7: Service deployment and validation
- name: Deploy and validate Traefik service
  block:
    - name: Start Traefik service
      community.docker.docker_compose_v2:
        project_src: "{{ traefik_data_dir }}"
        state: present
      register: traefik_service

    - name: Wait for Traefik to be ready (standardized health check)
      include_tasks: "{{ role_path }}/../common/tasks/service_health_check.yml"
      vars:
        service_name: "traefik"
        service_url: "http://localhost:{{ traefik_dashboard_port }}/api/rawdata"
        service_port: "{{ traefik_dashboard_port }}"
        expected_status_codes: [200]
        max_retries: 30
        retry_delay: 10
        service_container_name: "traefik"
        ignore_health_check_failures: false

  when: not ansible_check_mode

# Phase 8: Optional firewall configuration (can be skipped if not needed)
- name: Configure firewall rules for Traefik
  include_role:
    name: iptables
    apply:
      vars:
        iptables_allowed_tcp_ports: "{{ traefik_firewall_tcp_ports }}"
  when: traefik_configure_firewall | default(true)

- name: Display Traefik status
  debug:
    msg: |
      Traefik deployment completed successfully!
      
      Dashboard: http://localhost:{{ traefik_dashboard_port }}
      Web port: {{ traefik_web_port }}
      Web secure port: {{ traefik_websecure_port }}
      
      Service status: {{ traefik_service.changed | ternary('Started', 'Already running') }}
  when: not ansible_check_mode