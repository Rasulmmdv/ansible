---
# Optimized tasks file for jenkins-docker - improved execution order and parallelization
# This version groups independent operations and uses parallel execution where possible

# Phase 1: Critical validations first (fail fast)
- name: Validate Jenkins configuration variables
  include_tasks: "{{ role_path }}/../common/tasks/variable_validation.yml"
  vars:
    role_name: "jenkins-docker"
    required_variables:
      - "jenkins_domain"
      - "jenkins_admin_username"
      - "jenkins_admin_password"
      - "jenkins_home"
      - "jenkins_data_dir"
    sensitive_variables:
      - "jenkins_admin_password"
    conditional_variables:
      - condition: "jenkins_use_ssl | default(false)"
        variables:
          - "jenkins_ssl_cert_path"
          - "jenkins_ssl_key_path"
      - condition: "jenkins_install_plugins | default(true)"
        variables:
          - "jenkins_plugins_list"
    custom_validations:
      - name: "jenkins_domain"
        validation: "jenkins_domain | regex_search('^[a-zA-Z0-9.-]+$')"
        error_message: "jenkins_domain must be a valid domain name (letters, numbers, dots, hyphens only)"
      - name: "jenkins_home"
        validation: "jenkins_home | regex_search('^/')"
        error_message: "jenkins_home must be an absolute path starting with '/'"
      - name: "jenkins_data_dir"
        validation: "jenkins_data_dir | regex_search('^/')"
        error_message: "jenkins_data_dir must be an absolute path starting with '/'"

# Phase 2: Parallel infrastructure setup
- name: Setup Jenkins infrastructure in parallel
  block:
    # User and directory setup (fast, no network)
    - name: Setup Jenkins user and directories (standardized)
      include_tasks: "{{ role_path }}/../common/tasks/setup_service_user.yml"
      vars:
        service_name: "jenkins"
        service_user: "{{ jenkins_user }}"
        service_group: "{{ jenkins_group }}"
        service_uid: 1000
        service_gid: 1001
        service_shell: "/bin/bash"
        service_home: "{{ jenkins_home }}"
        additional_groups: ["docker"]
        service_directories:
          - "{{ jenkins_data_dir }}"
          - "{{ jenkins_home }}"
        directory_mode: "0755"

    # Network setup in parallel
    - name: Parallel network creation
      block:
        - name: Create Docker network for Jenkins
          community.docker.docker_network:
            name: "{{ jenkins_network_name }}"
            state: present
          async: 60
          poll: 0
          register: jenkins_network_job

        - name: Ensure Traefik network exists
          community.docker.docker_network:
            name: "{{ traefik_network_name | default('traefik-network') }}"
            state: present
          async: 60
          poll: 0
          register: traefik_network_job

        # Wait for network creation
        - name: Wait for Jenkins network creation
          async_status:
            jid: "{{ jenkins_network_job.ansible_job_id }}"
          register: jenkins_network_result
          until: jenkins_network_result.finished
          retries: 20
          delay: 3
          when: jenkins_network_job.ansible_job_id is defined

        - name: Wait for Traefik network creation
          async_status:
            jid: "{{ traefik_network_job.ansible_job_id }}"
          register: traefik_network_result
          until: traefik_network_result.finished
          retries: 20
          delay: 3
          when: traefik_network_job.ansible_job_id is defined

  when: not ansible_check_mode

# Phase 3: Set Jenkins UID/GID for backward compatibility
- name: Set Jenkins UID and GID variables for backward compatibility
  ansible.builtin.set_fact:
    jenkins_uid: "{{ jenkins_user_info.uid }}"
    jenkins_gid: "{{ jenkins_user_info.gid }}"

# Phase 4: Parallel directory permissions and structure setup
- name: Setup Jenkins directory structure in parallel
  block:
    - name: Set ownership of Jenkins directories with recursion
      ansible.builtin.file:
        path: "{{ item }}"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        recurse: true
        mode: '0755'
      loop:
        - "{{ jenkins_home }}"
        - "{{ jenkins_data_dir }}"
      become: true
      async: 120
      poll: 0
      register: ownership_jobs

    - name: Create Jenkins subdirectories in parallel
      block:
        - name: Ensure init.groovy.d directory exists
          file:
            path: "{{ jenkins_home }}/init.groovy.d"
            state: directory
            owner: "{{ jenkins_user }}"
            group: "{{ jenkins_group }}"
            mode: '0755'
          become: true
          async: 30
          poll: 0
          register: init_groovy_job

        - name: Create plugins directory with correct permissions
          file:
            path: "{{ jenkins_home }}/plugins"
            state: directory
            owner: "{{ jenkins_user }}"
            group: "{{ jenkins_group }}"
            mode: '0755'
          when: jenkins_install_plugins
          become: true
          async: 30
          poll: 0
          register: plugins_dir_job

        # Wait for directory creation
        - name: Wait for init.groovy.d directory
          async_status:
            jid: "{{ init_groovy_job.ansible_job_id }}"
          register: init_groovy_result
          until: init_groovy_result.finished
          retries: 10
          delay: 3
          when: init_groovy_job.ansible_job_id is defined

        - name: Wait for plugins directory
          async_status:
            jid: "{{ plugins_dir_job.ansible_job_id }}"
          register: plugins_dir_result
          until: plugins_dir_result.finished
          retries: 10
          delay: 3
          when: plugins_dir_job.ansible_job_id is defined and jenkins_install_plugins

    # Wait for ownership changes
    - name: Wait for ownership changes
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: ownership_results
      until: ownership_results.finished
      retries: 40
      delay: 3
      loop: "{{ ownership_jobs.results }}"
      when: item.ansible_job_id is defined

  when: not ansible_check_mode

# Phase 5: Optional plugin directory cleanup (if needed)
- name: Clear Jenkins plugins directory for fresh plugin installation
  file:
    path: "{{ jenkins_home }}/plugins"
    state: absent
  when: 
    - jenkins_install_plugins
    - jenkins_force_plugin_reinstall | default(false)
    - not ansible_check_mode
  become: true

# Phase 6: Final directory permissions with numeric ownership
- name: Ensure Jenkins home directory has correct numeric ownership and permissions
  file:
    path: "{{ jenkins_home }}"
    owner: "{{ jenkins_uid }}"
    group: "{{ jenkins_gid }}"
    recurse: true
    mode: '0775'
  become: true
  when: not ansible_check_mode

# Phase 7: Parallel configuration file creation
- name: Create Jenkins configuration files in parallel
  block:
    - name: Create basic Jenkins configuration files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0644'
      loop:
        - { src: 'jenkins.yaml.j2', dest: '{{ jenkins_data_dir }}/jenkins.yaml' }
        - { src: 'basic-security.groovy.j2', dest: '{{ jenkins_home }}/init.groovy.d/basic-security.groovy' }
      become: true
      notify: restart jenkins
      async: 60
      poll: 0
      register: config_jobs

    - name: Create Groovy plugin installation script
      template:
        src: install-plugins.groovy.j2
        dest: "{{ jenkins_home }}/init.groovy.d/install-plugins.groovy"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0644'
      when: jenkins_install_plugins
      become: true
      notify: restart jenkins
      async: 60
      poll: 0
      register: plugin_script_job

    - name: Create script console enablement script
      copy:
        content: |
          #!groovy
          import jenkins.model.*
          import hudson.security.*
          
          def instance = Jenkins.getInstance()
          println "Ensuring script console is accessible for automation..."
          
          // This script runs during initialization to ensure script console access
          // Required for automated node secret extraction
          println "Script console initialization completed"
        dest: "{{ jenkins_home }}/init.groovy.d/enable-script-console.groovy"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0644'
      become: true
      notify: restart jenkins
      async: 60
      poll: 0
      register: console_script_job

    # Wait for configuration file creation
    - name: Wait for basic configuration files
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: config_results
      until: config_results.finished
      retries: 20
      delay: 3
      loop: "{{ config_jobs.results }}"
      when: item.ansible_job_id is defined

    - name: Wait for plugin installation script
      async_status:
        jid: "{{ plugin_script_job.ansible_job_id }}"
      register: plugin_script_result
      until: plugin_script_result.finished
      retries: 20
      delay: 3
      when: plugin_script_job.ansible_job_id is defined and jenkins_install_plugins

    - name: Wait for console script
      async_status:
        jid: "{{ console_script_job.ansible_job_id }}"
      register: console_script_result
      until: console_script_result.finished
      retries: 20
      delay: 3
      when: console_script_job.ansible_job_id is defined

  when: not ansible_check_mode

# Phase 8: Docker container cleanup
- name: Stop and remove existing Jenkins container
  community.docker.docker_container:
    name: "{{ jenkins_container_name }}"
    state: absent
  ignore_errors: true
  when: not ansible_check_mode

# Phase 9: Docker Compose deployment
- name: Create Docker Compose configuration
  template:
    src: docker-compose.yml.j2
    dest: "{{ jenkins_data_dir }}/docker-compose.yml"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  become: true

- name: Deploy Jenkins with standardized Docker Compose
  include_tasks: "{{ role_path }}/../common/tasks/docker_compose_deploy.yml"
  vars:
    compose_project_name: "jenkins"
    compose_project_src: "{{ jenkins_data_dir }}"
    compose_pull: true
    compose_remove_orphans: true
  when: not ansible_check_mode

# Phase 10: Parallel health checks and validation
- name: Jenkins health checks and validation
  block:
    - name: Wait for Jenkins to be ready (standardized health check)
      include_tasks: "{{ role_path }}/../common/tasks/service_health_check.yml"
      vars:
        service_name: "jenkins"
        service_url: "https://{{ jenkins_domain }}/login"
        expected_status_codes: [200, 403, 302]
        validate_ssl_certs: "{{ jenkins_verify_ssl_certs | default(false) }}"
        max_retries: 30
        retry_delay: 10
        service_container_name: "{{ jenkins_container_name }}"
        ignore_health_check_failures: false

    - name: Wait for Jenkins API to be fully initialized
      include_tasks: "{{ role_path }}/../common/tasks/service_health_check.yml"
      vars:
        service_name: "jenkins-api"
        service_url: "https://{{ jenkins_domain }}/api/json"
        expected_status_codes: [200]
        validate_ssl_certs: "{{ jenkins_verify_ssl_certs | default(false) }}"
        max_retries: 30
        retry_delay: 10
        service_container_name: "{{ jenkins_container_name }}"
        ignore_health_check_failures: false

    # Parallel validation checks
    - name: Parallel Jenkins validation
      block:
        - name: Get list of installed plugins via Jenkins API
          block:
            - name: Query Jenkins plugin API
              ansible.builtin.uri:
                url: "https://{{ jenkins_domain }}/pluginManager/api/json?depth=1"
                method: GET
                user: "{{ jenkins_admin_username }}"
                password: "{{ jenkins_admin_password }}"
                force_basic_auth: true
                status_code: 200
                validate_certs: "{{ jenkins_verify_ssl_certs | default(false) }}"
              register: jenkins_installed_plugins
              retries: 5
              delay: 10
              until: jenkins_installed_plugins.status == 200
              async: 120
              poll: 0
          rescue:
            - name: Handle plugin API failure
              include_tasks: "{{ role_path }}/../common/tasks/failure_notification.yml"
              vars:
                notification_type: "warning"
                operation_name: "Jenkins Plugin API Query"
                error_message: "Could not retrieve installed plugin list from Jenkins API"
                troubleshooting_steps:
                  - "Verify Jenkins is fully started"
                  - "Check admin credentials"
                  - "Verify SSL certificate configuration"
                should_fail: false
          when: jenkins_install_plugins

        - name: Check Jenkins container logs for plugin installation
          command: docker logs {{ jenkins_container_name }} --tail 50
          register: jenkins_container_logs
          when: jenkins_install_plugins
          async: 30
          poll: 0

        - name: Verify Jenkins container is running properly
          community.docker.docker_container_info:
            name: "{{ jenkins_container_name }}"
          register: jenkins_container_info
          failed_when: 
            - jenkins_container_info.container.State.Status != "running"
            - jenkins_container_info.container.State.Health.Status is defined and jenkins_container_info.container.State.Health.Status != "healthy"
          async: 30
          poll: 0

        - name: Check Jenkins home directory permissions
          stat:
            path: "{{ jenkins_home }}"
          register: jenkins_home_stat
          async: 30
          poll: 0

        - name: Test Jenkins login functionality
          uri:
            url: "https://{{ jenkins_domain }}/login"
            method: GET
            validate_certs: "{{ jenkins_verify_ssl_certs | default(false) }}"
            return_content: yes
          register: jenkins_login_test
          failed_when: "'Jenkins' not in jenkins_login_test.content"
          async: 30
          poll: 0

  when: not ansible_check_mode

# Phase 11: Display comprehensive deployment information
- name: Display installed plugins summary
  debug:
    msg:
      - "=== Installed Plugins Summary ==="
      - "Total plugins installed: {{ jenkins_installed_plugins.json.plugins | length if jenkins_installed_plugins.json is defined else 'API call failed' }}"
      - "Expected plugins: {{ jenkins_plugins_list | length }}"
      - "Installation rate: {{ ((jenkins_installed_plugins.json.plugins | length | float) / (jenkins_plugins_list | length | float) * 100) | round(1) if jenkins_installed_plugins.json is defined else 'N/A' }}%"
      - ""
      - "Sample installed plugins:"
      - "{{ jenkins_installed_plugins.json.plugins[:5] | map(attribute='shortName') | list if jenkins_installed_plugins.json is defined else ['API call failed'] }}"
      - ""
      - "{% if jenkins_installed_plugins.json is defined and jenkins_installed_plugins.json.plugins | length == 0 %}WARNING: No plugins installed! This may indicate a configuration issue.{% endif %}"
      - "{% if jenkins_installed_plugins.json is defined and jenkins_installed_plugins.json.plugins | length < (jenkins_plugins_list | length * 0.8) %}WARNING: Less than 80% of expected plugins are installed.{% endif %}"
  when: 
    - jenkins_install_plugins
    - jenkins_installed_plugins.json is defined

- name: Display Jenkins deployment information
  debug:
    msg:
      - "=== Jenkins {{ jenkins_version }} deployment completed successfully! ==="
      - "🌐 Web Interface: https://{{ jenkins_domain }}"
      - "👤 Admin Username: {{ jenkins_admin_username }}"
      - "🐳 Container Name: {{ jenkins_container_name }}"
      - "🏠 Jenkins Home: {{ jenkins_home }}"
      - "📄 Docker Compose File: {{ jenkins_data_dir }}/docker-compose.yml"
      - "🔌 Plugin Installation: {{ 'Enabled' if jenkins_install_plugins else 'Disabled' }}"
      - "📊 Total Plugins: {{ jenkins_plugins_list | length if jenkins_install_plugins else 0 }}"
      - ""
      - "⚡ Performance Optimizations Applied:"
      - "  • Parallel network creation"
      - "  • Parallel directory setup"
      - "  • Parallel configuration file creation"
      - "  • Parallel health checks and validation"

- name: Check mode notice for Docker operations
  debug:
    msg: "Running in check mode - Docker container operations will be skipped. These tasks require actual execution."
  when: ansible_check_mode