---
# tasks file for jenkins-docker

- name: Setup Jenkins
  block:
    - name: Setup Jenkins user and directories (standardized)
      include_tasks: "{{ role_path }}/../common/tasks/setup_service_user.yml"
      vars:
        service_name: "jenkins"
        service_user: "{{ jenkins_user }}"
        service_group: "{{ jenkins_group }}"
        service_uid: 1000
        service_gid: 1001
        service_shell: "/bin/bash"
        service_home: "{{ jenkins_home }}"
        additional_groups: ["docker"]
        service_directories:
          - "{{ jenkins_data_dir }}"
          - "{{ jenkins_home }}"
        directory_mode: "0755"
        
    - name: Set Jenkins UID and GID variables for backward compatibility
      ansible.builtin.set_fact:
        jenkins_uid: "{{ jenkins_user_info.uid }}"
        jenkins_gid: "{{ jenkins_user_info.gid }}"
        
    - name: Set ownership of Jenkins directories with recursion
      ansible.builtin.file:
        path: "{{ item }}"
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        recurse: true
        mode: '0755'
      loop:
        - "{{ jenkins_home }}"
        - "{{ jenkins_data_dir }}"
      become: true

    - name: Create Docker network for Jenkins
      community.docker.docker_network:
        name: "{{ jenkins_network_name }}"
        state: present

    - name: Ensure Traefik network exists
      community.docker.docker_network:
        name: "{{ traefik_network_name | default('traefik-network') }}"
        state: present

    - name: Ensure init.groovy.d directory exists
      file:
        path: "{{ jenkins_home }}/init.groovy.d"
        state: directory
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0755'
      become: true

    - name: Clear Jenkins plugins directory for fresh plugin installation
      file:
        path: "{{ jenkins_home }}/plugins"
        state: absent
      when: 
        - jenkins_install_plugins
        - jenkins_force_plugin_reinstall | default(false)
      become: true

    - name: Create plugins directory with correct permissions
      file:
        path: "{{ jenkins_home }}/plugins"
        state: directory
        owner: "{{ jenkins_user }}"
        group: "{{ jenkins_group }}"
        mode: '0755'
      when: jenkins_install_plugins
      become: true

    - name: Ensure Jenkins home directory has correct numeric ownership and permissions
      file:
        path: "{{ jenkins_home }}"
        owner: "{{ jenkins_uid }}"
        group: "{{ jenkins_gid }}"
        recurse: true
        mode: '0775'
      become: true

    - name: Start Jenkins with Docker Compose
      command: docker compose up -d
      args:
        chdir: "{{ jenkins_data_dir }}"
      become: true

    - name: Wait for Jenkins to be ready (standardized health check)
      include_tasks: "{{ role_path }}/../common/tasks/service_health_check.yml"
      vars:
        service_name: "jenkins"
        service_url: "https://{{ jenkins_domain }}/login"
        expected_status_codes: [200, 403, 302]
        validate_ssl_certs: "{{ jenkins_verify_ssl_certs | default(false) }}"
        max_retries: 30
        retry_delay: 10
        service_container_name: "{{ jenkins_container_name }}"
        ignore_health_check_failures: false

    - name: Wait for Jenkins API to be fully initialized
      include_tasks: "{{ role_path }}/../common/tasks/service_health_check.yml"
      vars:
        service_name: "jenkins-api"
        service_url: "https://{{ jenkins_domain }}/api/json"
        expected_status_codes: [200]
        validate_ssl_certs: "{{ jenkins_verify_ssl_certs | default(false) }}"
        max_retries: 30
        retry_delay: 10
        service_container_name: "{{ jenkins_container_name }}"
        ignore_health_check_failures: false

    - name: Get list of installed plugins via Jenkins API
      block:
        - name: Query Jenkins plugin API
          ansible.builtin.uri:
            url: "https://{{ jenkins_domain }}/pluginManager/api/json?depth=1"
            method: GET
            user: "{{ jenkins_admin_username }}"
            password: "{{ jenkins_admin_password }}"
            force_basic_auth: true
            status_code: 200
            validate_certs: "{{ jenkins_verify_ssl_certs | default(false) }}"
          register: jenkins_installed_plugins
          retries: 5
          delay: 10
          until: jenkins_installed_plugins.status == 200
      rescue:
        - name: Handle plugin API failure
          include_tasks: "{{ role_path }}/../common/tasks/failure_notification.yml"
          vars:
            notification_type: "warning"
            operation_name: "Jenkins Plugin API Query"
            error_message: "Could not retrieve installed plugin list from Jenkins API"
            troubleshooting_steps:
              - "Verify Jenkins is fully started"
              - "Check admin credentials"
              - "Verify SSL certificate configuration"
            should_fail: false
      when: jenkins_install_plugins

    - name: Check Jenkins container logs for plugin installation
      command: docker logs {{ jenkins_container_name }} --tail 50
      register: jenkins_container_logs
      when: jenkins_install_plugins

    - name: Verify Jenkins container is running properly
      community.docker.docker_container_info:
        name: "{{ jenkins_container_name }}"
      register: jenkins_container_info
      failed_when: 
        - jenkins_container_info.container.State.Status != "running"
        - jenkins_container_info.container.State.Health.Status is defined and jenkins_container_info.container.State.Health.Status != "healthy"

    - name: Check Jenkins home directory permissions
      stat:
        path: "{{ jenkins_home }}"
      register: jenkins_home_stat
  when: not ansible_check_mode

- name: Create basic Jenkins configuration files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  loop:
    - { src: 'jenkins.yaml.j2', dest: '{{ jenkins_data_dir }}/jenkins.yaml' }
    - { src: 'basic-security.groovy.j2', dest: '{{ jenkins_home }}/init.groovy.d/basic-security.groovy' }
  become: true
  notify: restart jenkins

- name: Create Groovy plugin installation script
  template:
    src: install-plugins.groovy.j2
    dest: "{{ jenkins_home }}/init.groovy.d/install-plugins.groovy"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  when: jenkins_install_plugins
  become: true
  notify: restart jenkins

- name: Create script console enablement script
  copy:
    content: |
      #!groovy
      import jenkins.model.*
      import hudson.security.*
      
      def instance = Jenkins.getInstance()
      println "Ensuring script console is accessible for automation..."
      
      // This script runs during initialization to ensure script console access
      // Required for automated node secret extraction
      println "Script console initialization completed"
    dest: "{{ jenkins_home }}/init.groovy.d/enable-script-console.groovy"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  become: true
  notify: restart jenkins

- name: Check mode notice for Docker operations
  debug:
    msg: "Running in check mode - Docker container operations will be skipped. These tasks require actual execution."
  when: ansible_check_mode

# Note: Docker image pull is not needed - Docker Compose will handle this automatically
# Removing this task to avoid dependency on the 'requests' Python library

- name: Stop and remove existing Jenkins container
  community.docker.docker_container:
    name: "{{ jenkins_container_name }}"
    state: absent
  ignore_errors: true
  when: not ansible_check_mode

- name: Create Docker Compose configuration
  template:
    src: docker-compose.yml.j2
    dest: "{{ jenkins_data_dir }}/docker-compose.yml"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode: '0644'
  become: true

- name: Display installed plugins summary
  debug:
    msg:
      - "=== Installed Plugins Summary ==="
      - "Total plugins installed: {{ jenkins_installed_plugins.json.plugins | length if jenkins_installed_plugins.json is defined else 'API call failed' }}"
      - "Expected plugins: {{ jenkins_plugins_list | length }}"
      - "Installation rate: {{ ((jenkins_installed_plugins.json.plugins | length | float) / (jenkins_plugins_list | length | float) * 100) | round(1) if jenkins_installed_plugins.json is defined else 'N/A' }}%"
      - ""
      - "Sample installed plugins:"
      - "{{ jenkins_installed_plugins.json.plugins[:5] | map(attribute='shortName') | list if jenkins_installed_plugins.json is defined else ['API call failed'] }}"
      - ""
      - "{% if jenkins_installed_plugins.json is defined and jenkins_installed_plugins.json.plugins | length == 0 %}WARNING: No plugins installed! This may indicate a configuration issue.{% endif %}"
      - "{% if jenkins_installed_plugins.json is defined and jenkins_installed_plugins.json.plugins | length < (jenkins_plugins_list | length * 0.8) %}WARNING: Less than 80% of expected plugins are installed.{% endif %}"
  when: 
    - jenkins_install_plugins
    - jenkins_installed_plugins.json is defined

- name: Display Jenkins logs related to plugins
  debug:
    msg:
      - "=== Jenkins Container Logs (last 50 lines) ==="
      - "{{ jenkins_container_logs.stdout_lines | default(['No logs available']) }}"
  when: 
    - jenkins_install_plugins
    - jenkins_container_logs.json is defined

- name: Test Jenkins login functionality
  uri:
    url: "https://{{ jenkins_domain }}/login"
    method: GET
    validate_certs: "{{ jenkins_verify_ssl_certs | default(false) }}"
    return_content: yes
  register: jenkins_login_test
  failed_when: "'Jenkins' not in jenkins_login_test.content"

- name: Display Jenkins deployment information
  debug:
    msg:
      - "Jenkins {{ jenkins_version }} has been successfully deployed!"
      - "Web Interface: https://{{ jenkins_domain }}"
      - "Admin Username: {{ jenkins_admin_username }}"
      - "Container Name: {{ jenkins_container_name }}"
      - "Jenkins Home: {{ jenkins_home }}"
      - "Docker Compose File: {{ jenkins_data_dir }}/docker-compose.yml"
      - "Plugin Installation: {{ 'Enabled' if jenkins_install_plugins else 'Disabled' }}"
      - "Total Plugins: {{ jenkins_plugins_list | length if jenkins_install_plugins else 0 }}"
