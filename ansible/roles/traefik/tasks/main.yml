---
# tasks file for traefik

# Validate required variables for Traefik
- name: Validate Traefik configuration variables
  include_tasks: "{{ role_path }}/../common/tasks/variable_validation.yml"
  tags: [prereq, validate]
  vars:
    role_name: "traefik"
    required_variables:
      - "traefik_domain"
      - "traefik_dashboard_domain"
      - "traefik_data_dir"
      - "traefik_config_dir"
      - "traefik_certs_dir"
      - "traefik_logs_dir"
      - "traefik_user"
      - "traefik_group"
      - "traefik_network_name"
    sensitive_variables:
      - "traefik_dashboard_password"
    conditional_variables:
      - condition: "traefik_acme_enabled | default(false)"
        variables: 
          - "traefik_acme_email"
          - "traefik_acme_ca_server"
      - condition: "traefik_dashboard_auth_enabled | default(false)"
        variables:
          - "traefik_dashboard_password"
          - "traefik_dashboard_username"
      - condition: "traefik_certificate_type == 'custom'"
        variables:
          - "traefik_certificate_files"
    custom_validations:
      - name: "traefik_domain"
        validation: "traefik_domain | regex_search('^[a-zA-Z0-9.-]+$')"
        error_message: "traefik_domain must be a valid domain name (letters, numbers, dots, hyphens only)"
      - name: "traefik_dashboard_domain"
        validation: "traefik_dashboard_domain | regex_search('^[a-zA-Z0-9.-]+$')"
        error_message: "traefik_dashboard_domain must be a valid domain name (letters, numbers, dots, hyphens only)"
      - name: "traefik_acme_email"
        condition: "traefik_acme_enabled | default(false)"
        validation: "traefik_acme_email | regex_search('@')"
        error_message: "traefik_acme_email must be a valid email address when ACME is enabled"
      - name: "traefik_data_dir"
        validation: "traefik_data_dir | regex_search('^/')"
        error_message: "traefik_data_dir must be an absolute path starting with '/'"
      - name: "traefik_config_dir"
        validation: "traefik_config_dir | regex_search('^/')"
        error_message: "traefik_config_dir must be an absolute path starting with '/'"
      - name: "traefik_certs_dir"
        validation: "traefik_certs_dir | regex_search('^/')"
        error_message: "traefik_certs_dir must be an absolute path starting with '/'"
      - name: "traefik_logs_dir"
        validation: "traefik_logs_dir | regex_search('^/')"
        error_message: "traefik_logs_dir must be an absolute path starting with '/'"
      - name: "traefik_web_port"
        validation: "traefik_web_port | int > 0 and traefik_web_port | int <= 65535"
        error_message: "traefik_web_port must be a valid port number (1-65535)"
      - name: "traefik_websecure_port"
        validation: "traefik_websecure_port | int > 0 and traefik_websecure_port | int <= 65535"
        error_message: "traefik_websecure_port must be a valid port number (1-65535)"
      - name: "traefik_dashboard_port"
        validation: "traefik_dashboard_port | int > 0 and traefik_dashboard_port | int <= 65535"
        error_message: "traefik_dashboard_port must be a valid port number (1-65535)"
      - name: "traefik_certificate_type"
        validation: "traefik_certificate_type in ['acme', 'custom', 'none']"
        error_message: "traefik_certificate_type must be one of: acme, custom, none"
      - name: "traefik_log_level"
        validation: "traefik_log_level in ['DEBUG', 'INFO', 'WARN', 'ERROR', 'FATAL', 'PANIC']"
        error_message: "traefik_log_level must be one of: DEBUG, INFO, WARN, ERROR, FATAL, PANIC"
      - name: "traefik_dashboard_allow_network"
        validation: "traefik_dashboard_allow_network in ['wireguard', 'tailscale']"
        error_message: "traefik_dashboard_allow_network must be one of: wireguard, tailscale"

# Prerequisites installation
- name: Install system prerequisites
  package:
    name: "{{ traefik_system_packages }}"
    state: present
    update_cache: true
  become: true
  when: not ansible_check_mode
  tags: [install, prereq]

- name: Try to install Python dependencies via system packages
  package:
    name: "{{ traefik_system_python_packages }}"
    state: present
    update_cache: true
  become: true
  register: system_packages_result
  ignore_errors: true
  when: not ansible_check_mode

- name: Install Python dependencies via pip (fallback if system packages failed)
  pip:
    name: "{{ item }}"
    state: present
    executable: pip3
    break_system_packages: yes
  loop:
    - bcrypt
    - docker
  become: true
  when: system_packages_result is failed and not ansible_check_mode

- name: Install additional Python dependencies via pip (if configured)
  pip:
    name: "{{ item }}"
    state: present
    executable: pip3
    break_system_packages: yes
  loop: "{{ traefik_pip_packages }}"
  become: true
  when: traefik_pip_packages is defined and traefik_pip_packages | length > 0 and not ansible_check_mode

- name: Verify Python bcrypt installation
  block:
    - name: Test bcrypt import
      ansible.builtin.command: python3 -c "import bcrypt; print('bcrypt is available')"
      register: bcrypt_check
      changed_when: false
  rescue:
    - name: Handle bcrypt verification failure
      include_tasks: "{{ role_path }}/../common/tasks/failure_notification.yml"
      vars:
        notification_type: "error"
        operation_name: "Python bcrypt verification"
        error_message: "bcrypt library is not available"
        troubleshooting_steps:
          - "Install bcrypt: pip3 install bcrypt"
          - "Or install via system package: apt install python3-bcrypt"
          - "Verify Python version compatibility"
        should_fail: true

- name: Verify Python docker installation
  block:
    - name: Test docker import
      ansible.builtin.command: python3 -c "import docker; print('docker is available')"
      register: docker_python_check
      changed_when: false
  rescue:
    - name: Handle docker verification failure
      include_tasks: "{{ role_path }}/../common/tasks/failure_notification.yml"
      vars:
        notification_type: "error"
        operation_name: "Python docker verification"
        error_message: "docker library is not available"
        troubleshooting_steps:
          - "Install docker: pip3 install docker"
          - "Or install via system package: apt install python3-docker"
          - "Verify Docker daemon is running"
        should_fail: true

- name: Setup Docker and verify services
  block:
    - name: Ensure Docker is installed (include docker role)
      include_role:
        name: docker
      when: traefik_ensure_docker_installed | default(true)

    - name: Verify Docker is running
      systemd:
        name: docker
        state: started
        enabled: true
      become: true
      when: traefik_ensure_docker_installed | default(true)

    - name: Verify Docker Compose is available
      command: docker compose version
      register: docker_compose_check
      changed_when: false
      ignore_errors: true
      when: traefik_ensure_docker_installed | default(true)
  when: not ansible_check_mode

# Build the list of TCP ports that must remain open (existing + Traefik-specific)
- name: Determine firewall TCP ports for Traefik
  set_fact:
    traefik_firewall_tcp_ports: "{{ ((iptables_allowed_tcp_ports | default([22, 80, 443])) + [traefik_web_port, traefik_websecure_port] + (traefik_dashboard_expose_port | default(false) | ternary([traefik_dashboard_port], []))) | unique }}"
  when: traefik_configure_firewall | default(true)

- name: Configure firewall rules for Traefik
  include_role:
    name: iptables
    apply:
      vars:
        iptables_allowed_tcp_ports: "{{ traefik_firewall_tcp_ports }}"
        # iptables_install_when_docker_present: "{{ iptables_install_when_docker_present | default(true) }}"  # Removed due to recursive templating issues
  when: traefik_configure_firewall | default(true)

- name: Display prerequisite check results
  debug:
    msg:
      - "Prerequisites verification completed:"
      - "  - bcrypt: {{ 'OK' if bcrypt_check.json is defined and bcrypt_check.rc == 0 else 'FAILED' }}"
      - "  - docker (Python): {{ 'OK' if docker_python_check.json is defined and docker_python_check.rc == 0 else 'FAILED'  }}"
      - "  - Docker Compose: {{ 'OK' if docker_compose_check.json is defined and docker_compose_check.rc == 0 else 'SKIPPED' if not traefik_ensure_docker_installed | default(true) else 'FAILED' }}"
      - "  - Required ports configured: {{ traefik_web_port }}, {{ traefik_websecure_port }}, {{ traefik_dashboard_port }}"

- name: Setup Traefik user and directories (standardized)
  include_tasks: "{{ role_path }}/../common/tasks/setup_service_user.yml"
  tags: [configure, security]
  vars:
    service_name: "traefik"
    service_user: "{{ traefik_user }}"
    service_group: "{{ traefik_group }}"
    service_home: "{{ traefik_data_dir }}"
    service_shell: "/bin/bash"
    additional_groups: ["docker"]
    service_directories:
      - "{{ traefik_data_dir }}"
      - "{{ traefik_config_dir }}"
      - "{{ traefik_certs_dir }}"
      - "{{ traefik_logs_dir }}"
    directory_mode: "0755"
    
- name: Set Traefik UID and GID variables for backward compatibility
  ansible.builtin.set_fact:
    traefik_uid: "{{ traefik_user_info.uid }}"
    traefik_gid: "{{ traefik_user_info.gid }}"

- name: Set ownership of Traefik directories
  file:
    path: "{{ item }}"
    owner: "{{ traefik_user }}"
    group: "{{ traefik_group }}"
    recurse: true
  loop:
    - "{{ traefik_data_dir }}"
    - "{{ traefik_config_dir }}"
    - "{{ traefik_certs_dir }}"
    - "{{ traefik_logs_dir }}"
  become: true

- name: Set special permissions for certificates directory
  file:
    path: "{{ traefik_certs_dir }}"
    mode: '0600'
    state: directory
  become: true

- name: Create Docker network and configure Traefik
  block:
    - name: Create Docker network for Traefik
      community.docker.docker_network:
        name: "{{ traefik_network_name }}"
        state: present

    - name: Generate bcrypt password hash for dashboard authentication
      shell: |
        python3 -c "import bcrypt; print(bcrypt.hashpw('{{ traefik_dashboard_password | default('changeme') }}'.encode('utf-8'), bcrypt.gensalt()).decode('utf-8'))"
      register: traefik_password_bcrypt
      when: traefik_dashboard_auth_enabled and traefik_dashboard_password is defined
      changed_when: false
      no_log: true
      ignore_errors: true

    - name: Create Traefik static configuration file
      template:
        src: traefik.yml.j2
        dest: "{{ traefik_data_dir }}/traefik.yml"
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        mode: '0644'
      become: true
      notify: restart traefik

    - name: Create dynamic configuration file
      template:
        src: dynamic.yml.j2
        dest: "{{ traefik_config_dir }}/dynamic.yml"
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        mode: '0644'
      become: true
      notify: restart traefik

    - name: Create middlewares configuration file
      template:
        src: middlewares.yml.j2
        dest: "{{ traefik_config_dir }}/middlewares.yml"
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        mode: '0644'
      become: true
      notify: restart traefik

    - name: Create ACME certificates file with correct permissions
      file:
        path: "{{ traefik_certs_dir }}/acme.json"
        state: touch
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        mode: '0600'
      become: true
      when: traefik_certificate_type == 'acme' and traefik_acme_enabled

    - name: Check if custom certificate files exist
      stat:
        path: "{{ item.cert }}"
      register: custom_cert_check
      loop: "{{ traefik_certificate_files }}"
      loop_control:
        loop_var: cert_item
      when: 
        - traefik_certificate_type == 'custom' 
        - traefik_certificates_enabled
        - traefik_certificate_files is defined
        - traefik_certificate_files | length > 0

    - name: Warn about missing custom certificate files
      debug:
        msg: "Warning: Custom certificate file {{ cert_item.cert }} does not exist"
      loop: "{{ custom_cert_check.results }}"
      loop_control:
        loop_var: result_item
      when: 
        - traefik_certificate_type == 'custom' 
        - traefik_certificates_enabled
        - custom_cert_check is defined
        - result_item.stat.exists == false

    - name: Copy custom certificate files
      copy:
        src: "{{ cert_file.cert }}"
        dest: "{{ traefik_certs_dir }}/{{ cert_file.cert | basename }}"
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        mode: '0644'
      loop: "{{ traefik_certificate_files }}"
      loop_control:
        loop_var: cert_file
      become: true
      when: 
        - traefik_certificate_type == 'custom' 
        - traefik_certificates_enabled
        - traefik_certificate_files is defined
        - traefik_certificate_files | length > 0

    - name: Copy custom private key files
      copy:
        src: "{{ key_file.key }}"
        dest: "{{ traefik_certs_dir }}/{{ key_file.key | basename }}"
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        mode: '0600'
      loop: "{{ traefik_certificate_files }}"
      loop_control:
        loop_var: key_file
      become: true
      when: 
        - traefik_certificate_type == 'custom' 
        - traefik_certificates_enabled
        - traefik_certificate_files is defined
        - traefik_certificate_files | length > 0

    - name: Create Traefik docker-compose file
      template:
        src: docker-compose.yml.j2
        dest: "{{ traefik_data_dir }}/docker-compose.yml"
        owner: "{{ traefik_user }}"
        group: "{{ traefik_group }}"
        mode: '0644'
      become: true
      notify: restart traefik
  when: not ansible_check_mode

- name: Start Traefik service
  community.docker.docker_compose_v2:
    project_src: "{{ traefik_data_dir }}"
    state: present
  register: traefik_service
  when: not ansible_check_mode
  tags: [deploy, docker, web]

- name: Wait for Traefik to be ready (dashboard disabled - basic container check)
  block:
    - name: Verify Traefik container is running when dashboard is disabled
      command: docker ps --filter "name=traefik" --filter "status=running" -q
      register: traefik_container_check
      failed_when: traefik_container_check.stdout == ""
      changed_when: false

    - name: Confirm Traefik container health
      debug:
        msg: "✅ Traefik container is running (dashboard disabled mode)"
  when: not (traefik_dashboard_enabled | default(true)) and not ansible_check_mode

- name: Wait for Traefik to be ready (standardized health check)
  include_tasks: "{{ role_path }}/../common/tasks/service_health_check.yml"
  tags: [validate, web]
  vars:
    service_name: "traefik"
    service_url: "http://localhost:{{ traefik_dashboard_port }}/ping"
    service_port: "{{ traefik_dashboard_port }}"
    expected_status_codes: [200]
    max_retries: 30
    retry_delay: 10
    service_container_name: "traefik"
    ignore_health_check_failures: false
  when: traefik_dashboard_enabled | default(true) and not ansible_check_mode

- name: Display Traefik status
  debug:
    msg: |
      Traefik deployment completed successfully!
      
      Dashboard: http://localhost:{{ traefik_dashboard_port }}
      Web port: {{ traefik_web_port }}
      Web secure port: {{ traefik_websecure_port }}
      
      Service status: {{ traefik_service.changed | ternary('Started', 'Already running') }}
      Ready check: {{ traefik_ready_check.status | default('N/A') }}
  when: not ansible_check_mode 