---
# tasks file for prometheus

- name: Ensure monitoring network exists
  community.docker.docker_network:
    name: "{{ monitoring_stack.network_name }}"
    state: present
  become: true
  when: not ansible_check_mode
  tags: [install, configure, docker]

- name: Detect Docker gateway IP for node_exporter connectivity
  block:
    - name: Inspect monitoring network for gateway IP
      community.docker.docker_network_info:
        name: "{{ monitoring_stack.network_name }}"
      register: monitoring_network_info
      failed_when: false
      
    - name: Extract monitoring network gateway IP
      ansible.builtin.set_fact:
        monitoring_gateway_ip: "{{ monitoring_network_info.network.IPAM.Config[0].Gateway | default('') }}"
      when: 
        - monitoring_network_info is succeeded
        - monitoring_network_info.network.IPAM.Config is defined
        - monitoring_network_info.network.IPAM.Config | length > 0
        
    - name: Inspect default bridge network for gateway IP
      community.docker.docker_network_info:
        name: "bridge"
      register: bridge_network_info
      failed_when: false
      when: monitoring_gateway_ip is not defined or monitoring_gateway_ip == ''
      
    - name: Extract bridge network gateway IP
      ansible.builtin.set_fact:
        bridge_gateway_ip: "{{ bridge_network_info.network.IPAM.Config[0].Gateway | default('') }}"
      when: 
        - bridge_network_info is defined
        - bridge_network_info is succeeded
        - bridge_network_info.network.IPAM.Config is defined
        - bridge_network_info.network.IPAM.Config | length > 0
        
    - name: Set final Docker gateway IP
      ansible.builtin.set_fact:
        docker_gateway_ip:
          stdout: "{{ monitoring_gateway_ip | default(bridge_gateway_ip | default('172.17.0.1')) }}"
  when: not ansible_check_mode
  tags: [configure]

- name: Set node_exporter target IP
  set_fact:
    prometheus_node_exporter_target: "{{ docker_gateway_ip.stdout | default('host.docker.internal') }}:9100"
  when: not ansible_check_mode
  tags: [configure]

# Note: Firewall configuration is handled centrally by the monitoring-stack role
# to ensure proper iptables rules and avoid conflicts between individual roles.

- name: Setup Prometheus user and directories (standardized)
  include_tasks: "{{ role_path }}/../common/tasks/setup_service_user.yml"
  vars:
    service_name: "prometheus"
    service_user: "{{ prometheus_user }}"
    service_group: "{{ prometheus_group }}"
    service_uid: "{{ prometheus_user_id | default(omit) }}"
    service_gid: "{{ prometheus_group_id | default(omit) }}"
    service_directories:
      - "{{ prometheus_data_dir }}"
      - "{{ prometheus_data_dir }}/data"
      - "{{ prometheus_config_dir }}"
      - "{{ prometheus_rules_dir }}"
      - "{{ prometheus_alerts_dir }}"
      - "{{ prometheus_config_dir }}/targets"
    directory_mode: "0755"
  when: not ansible_check_mode
  tags: [install, configure]

- name: Deploy docker-compose.yml for Prometheus
  template:
    src: docker-compose.yml.j2
    dest: "{{ prometheus_data_dir }}/docker-compose.yml"
    owner: "{{ prometheus_user_id }}"
    group: "{{ prometheus_group_id }}"
    mode: '0644'
  become: true
  tags: [configure, deploy, monitoring]

- name: Deploy prometheus.yml config
  template:
    src: prometheus.yml.j2
    dest: "{{ prometheus_config_dir }}/prometheus.yml"
    owner: "{{ prometheus_user_id }}"
    group: "{{ prometheus_group_id }}"
    mode: '0644'
  become: true
  tags: [configure, deploy, monitoring]

- name: Deploy Loki targets for file-based service discovery
  template:
    src: loki_targets.yml.j2
    dest: "{{ prometheus_config_dir }}/targets/loki_targets.yml"
    owner: "{{ prometheus_user_id }}"
    group: "{{ prometheus_group_id }}"
    mode: '0644'
  notify: reload prometheus
  tags: [configure, deploy, monitoring]

# Deploy retention monitoring and management
- name: Deploy retention alert rules
  copy:
    src: retention_alerts.yml
    dest: "{{ prometheus_rules_dir }}/retention_alerts.yml"
    owner: "{{ prometheus_user_id }}"
    group: "{{ prometheus_group_id }}"
    mode: '0644'
  notify: reload prometheus
  tags: [configure, deploy, monitoring]

- name: Start Prometheus with Docker Compose
  community.docker.docker_compose_v2:
    project_src: "{{ prometheus_data_dir }}"
    state: present
  become: true
  notify: restart prometheus
  when: not ansible_check_mode
  tags: [deploy, start]

- name: Deploy retention cleanup script
  copy:
    src: cleanup_retention.sh
    dest: "{{ prometheus_data_dir }}/cleanup_retention.sh"
    owner: "{{ prometheus_user_id }}"
    group: "{{ prometheus_group_id }}"
    mode: '0755'
  become: true
  tags: [configure, deploy, monitoring]

- name: Create retention cleanup symlink
  file:
    src: "{{ prometheus_data_dir }}/cleanup_retention.sh"
    dest: "/usr/local/bin/cleanup-monitoring-retention"
    state: link
  become: true
  when: not ansible_check_mode
  tags: [configure, deploy, monitoring]

# Create retention monitoring cron job
- name: Create retention monitoring cron job
  cron:
    name: "Monitor retention and cleanup"
    minute: "0"
    hour: "2"
    job: "{{ prometheus_data_dir }}/cleanup_retention.sh --check >> /var/log/monitoring-retention.log 2>&1"
    user: "{{ prometheus_user }}"
  become: true
  when: prometheus_retention.cleanup.enabled | default(true) and not ansible_check_mode
  tags: [configure, deploy, monitoring]

# Verify retention configuration
- name: Wait for Prometheus to be ready (standardized health check)
  include_tasks: "{{ role_path }}/../common/tasks/service_health_check.yml"
  vars:
    service_name: "prometheus"
    service_url: "http://localhost:9090/-/ready"
    service_port: 9090
    expected_status_codes: [200]
    max_retries: 30
    retry_delay: 10
    service_container_name: "prometheus"
    ignore_health_check_failures: true  # This is a validation step
  when: not ansible_check_mode
  tags: [validate, monitoring]

- name: Check Prometheus retention configuration
  include_tasks: "{{ role_path }}/../common/tasks/network_retry.yml"
  vars:
    operation_name: "Prometheus runtime info query"
    operation_url: "http://localhost:9090/api/v1/status/runtimeinfo"
    operation_method: "GET"
    max_retries: 5
    retry_delay: 5
    ignore_network_failures: true  # This is validation, not critical
  register: prometheus_runtime_info
  when: not ansible_check_mode
  tags: [validate, monitoring]

- name: Display Prometheus retention settings
  debug:
    msg:
      - "Prometheus retention configuration:"
      - "Time retention: {{ prometheus_retention.time }}"
      - "Size retention: {{ prometheus_retention.size }}"
      - "Runtime retention: {{ prometheus_runtime_info.json.data.storageRetention | default('Not available') }}"
  when: prometheus_runtime_info.json is defined and not ansible_check_mode
  tags: [validate, monitoring] 