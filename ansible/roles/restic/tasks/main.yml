---
# Install system packages
- name: Check mode notice for restic
  debug:
    msg: "Running in check mode - restic repository operations and systemd tasks will be skipped. These tasks require actual execution."
  when: ansible_check_mode

- name: Install system packages
  apt:
    name: "{{ restic_system_packages }}"
    state: present
    update_cache: yes

# Create restic user and group
- name: Create restic group
  group:
    name: "{{ restic_group }}"
    state: present

- name: Create restic user
  user:
    name: "{{ restic_user }}"
    group: "{{ restic_group }}"
    system: yes
    shell: /bin/bash
    home: "{{ restic_base_dir }}"
    create_home: no

# Configure sudo permissions for restic user
- name: Allow restic user to run restic with sudo
  copy:
    content: |
      # Allow restic user to run restic command with elevated privileges
      {{ restic_user }} ALL=(ALL) NOPASSWD: /usr/bin/restic
    dest: /etc/sudoers.d/restic-backup
    owner: root
    group: root
    mode: "0440"
    validate: /usr/sbin/visudo -cf %s

# Create directories
- name: Create restic base directory
  file:
    path: "{{ restic_base_dir }}"
    state: directory
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0755"

- name: Create restic config directory
  file:
    path: "{{ restic_config_dir }}"
    state: directory
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0750"

- name: Create restic logs directory
  file:
    path: "{{ restic_log_dir }}"
    state: directory
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0750"

- name: Create restic cache directory
  file:
    path: "{{ restic_cache_dir }}"
    state: directory
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0750"

- name: Create restic scripts directory
  file:
    path: "{{ restic_scripts_dir }}"
    state: directory
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0750"

# Setup Selectel CA certificate if using Selectel S3
- name: Download Selectel root CA certificate
  get_url:
    url: https://secure.globalsign.net/cacert/root-r6.crt
    dest: "{{ restic_config_dir }}/selectel-ca-raw.crt"
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0644"
  when: 
    - not ansible_check_mode
    - restic_setup_selectel_ca | bool and restic_repository_type == "s3" and "selcloud.ru" in restic_aws_endpoint

- name: Convert Selectel CA certificate to PEM format
  command: openssl x509 -inform der -in "{{ restic_config_dir }}/selectel-ca-raw.crt" -out "{{ restic_s3_ca_bundle }}"
  become: yes
  become_user: "{{ restic_user }}"
  when: 
    - not ansible_check_mode
    - restic_setup_selectel_ca | bool and restic_repository_type == "s3" and "selcloud.ru" in restic_aws_endpoint

- name: Set proper permissions for Selectel CA certificate
  file:
    path: "{{ restic_s3_ca_bundle }}"
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0600"
  when: 
    - not ansible_check_mode
    - restic_setup_selectel_ca | bool and restic_repository_type == "s3" and "selcloud.ru" in restic_aws_endpoint

- name: Remove temporary raw certificate file
  file:
    path: "{{ restic_config_dir }}/selectel-ca-raw.crt"
    state: absent
  when: 
    - not ansible_check_mode
    - restic_setup_selectel_ca | bool and restic_repository_type == "s3" and "selcloud.ru" in restic_aws_endpoint

# Create environment file for restic configuration
- name: Create restic environment file
  template:
    src: restic.env.j2
    dest: "{{ restic_config_dir }}/restic.env"
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0600"

# Create backup script
- name: Create backup script
  template:
    src: backup.sh.j2
    dest: "{{ restic_scripts_dir }}/backup.sh"
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0750"

# Create prune script
- name: Create prune script
  template:
    src: prune.sh.j2
    dest: "{{ restic_scripts_dir }}/prune.sh"
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0750"

# Create check script
- name: Create check script
  template:
    src: check.sh.j2
    dest: "{{ restic_scripts_dir }}/check.sh"
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0750"

# Create PostgreSQL dump directory if database backup is enabled
- name: Create PostgreSQL dump directory
  file:
    path: "{{ restic_postgresql_backup_dir }}"
    state: directory
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0750"
  when: restic_postgresql_backup_enabled | bool

# Create PostgreSQL dump script
- name: Create PostgreSQL dump script
  template:
    src: pg_dump.sh.j2
    dest: "{{ restic_scripts_dir }}/pg_dump.sh"
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0750"
  when: restic_postgresql_backup_enabled | bool

# Create database configuration file
- name: Create database configuration file
  template:
    src: databases.conf.j2
    dest: "{{ restic_config_dir }}/databases.conf"
    owner: "{{ restic_user }}"
    group: "{{ restic_group }}"
    mode: "0640"
  when: restic_postgresql_backup_enabled | bool

# Add restic user to docker group for container access (if needed)
- name: Add restic user to docker group
  user:
    name: "{{ restic_user }}"
    groups: docker
    append: yes
  when: 
    - restic_postgresql_backup_enabled | bool
    - restic_postgresql_databases | selectattr('container_name', 'defined') | list | length > 0

# Create systemd service files
- name: Create backup service file
  template:
    src: restic.service.j2
    dest: "/etc/systemd/system/{{ restic_service_name }}.service"
    owner: root
    group: root
    mode: "0644"
  notify: reload systemd

- name: Create prune service file
  template:
    src: prune.service.j2
    dest: "/etc/systemd/system/{{ restic_service_name }}_prune.service"
    owner: root
    group: root
    mode: "0644"
  notify: reload systemd

- name: Create check service file
  template:
    src: check.service.j2
    dest: "/etc/systemd/system/{{ restic_service_name }}_check.service"
    owner: root
    group: root
    mode: "0644"
  notify: reload systemd

# Create systemd timer files
- name: Create backup timer
  template:
    src: backup.timer.j2
    dest: "/etc/systemd/system/{{ restic_service_name }}.timer"
    owner: root
    group: root
    mode: "0644"
  notify: reload systemd

- name: Create prune timer
  template:
    src: prune.timer.j2
    dest: "/etc/systemd/system/{{ restic_service_name }}_prune.timer"
    owner: root
    group: root
    mode: "0644"
  notify: reload systemd

- name: Create check timer
  template:
    src: check.timer.j2
    dest: "/etc/systemd/system/{{ restic_service_name }}_check.timer"
    owner: root
    group: root
    mode: "0644"
  notify: reload systemd

# Initialize repository if it doesn't exist
- name: Check if restic repository is initialized
  block:
    - name: Test restic repository access
      become: yes
      become_user: "{{ restic_user }}"
      ansible.builtin.command: restic snapshots
      environment: "{{ restic_environment }}"
      vars:
        restic_environment: "{{ restic_base_env | combine(restic_s3_env if restic_repository_type == 's3' else {}) }}"
        restic_base_env:
          RESTIC_REPOSITORY: "{{ restic_repository }}"
          RESTIC_PASSWORD: "{{ restic_password }}"
        restic_s3_env: >-
          {{
            {
              'AWS_ACCESS_KEY_ID': restic_aws_access_key_id,
              'AWS_SECRET_ACCESS_KEY': restic_aws_secret_access_key,
              'AWS_DEFAULT_REGION': restic_aws_region
            } |
            combine({'AWS_S3_ENDPOINT': restic_s3_endpoint_url} if (restic_s3_endpoint_url is defined and restic_s3_endpoint_url) else {}) |
            combine({'AWS_CA_BUNDLE': restic_s3_ca_bundle} if (restic_s3_ca_bundle is defined and restic_s3_ca_bundle and restic_setup_selectel_ca | bool) else {})
          }}
      register: restic_init_check
      failed_when: false
      changed_when: false
      retries: 3
      delay: 5
  rescue:
    - name: Handle repository access failure
      include_tasks: "{{ role_path }}/../common/tasks/failure_notification.yml"
      vars:
        notification_type: "warning"
        operation_name: "Restic repository access check"
        error_message: "Cannot access restic repository, will attempt initialization"
        troubleshooting_steps:
          - "Verify repository URL and credentials"
          - "Check network connectivity to repository"
          - "Verify S3/storage service is accessible"
        should_fail: false
    - name: Set failed check result
      ansible.builtin.set_fact:
        restic_init_check:
          rc: 1
  when: not ansible_check_mode

- name: Initialize restic repository
  become: yes
  become_user: "{{ restic_user }}"
  command: restic init
  environment: "{{ restic_environment }}"
  vars:
    restic_environment: "{{ restic_base_env | combine(restic_s3_env if restic_repository_type == 's3' else {}) }}"
    restic_base_env:
      RESTIC_REPOSITORY: "{{ restic_repository }}"
      RESTIC_PASSWORD: "{{ restic_password }}"
    restic_s3_env: >-
      {{
        {
          'AWS_ACCESS_KEY_ID': restic_aws_access_key_id,
          'AWS_SECRET_ACCESS_KEY': restic_aws_secret_access_key,
          'AWS_DEFAULT_REGION': restic_aws_region
        } |
        combine({'AWS_S3_ENDPOINT': restic_s3_endpoint_url} if (restic_s3_endpoint_url is defined and restic_s3_endpoint_url) else {}) |
        combine({'AWS_CA_BUNDLE': restic_s3_ca_bundle} if (restic_s3_ca_bundle is defined and restic_s3_ca_bundle and restic_setup_selectel_ca | bool) else {})
      }}
  when: 
    - not ansible_check_mode
    - restic_init_check.rc != 0

# Enable and start timers
- name: Enable and start backup timer
  systemd:
    name: "{{ restic_service_name }}.timer"
    enabled: yes
    state: started
    daemon_reload: yes
  when: not ansible_check_mode

- name: Enable and start prune timer
  systemd:
    name: "{{ restic_service_name }}_prune.timer"
    enabled: yes
    state: started
    daemon_reload: yes
  when: not ansible_check_mode

- name: Enable and start check timer
  systemd:
    name: "{{ restic_service_name }}_check.timer"
    enabled: yes
    state: started
    daemon_reload: yes
  when: not ansible_check_mode

# Verify restic is working
- name: Test restic connectivity
  become: yes
  become_user: "{{ restic_user }}"
  command: restic snapshots
  environment: "{{ restic_environment }}"
  vars:
    restic_environment: "{{ restic_base_env | combine(restic_s3_env if restic_repository_type == 's3' else {}) }}"
    restic_base_env:
      RESTIC_REPOSITORY: "{{ restic_repository }}"
      RESTIC_PASSWORD: "{{ restic_password }}"
    restic_s3_env: >-
      {{
        {
          'AWS_ACCESS_KEY_ID': restic_aws_access_key_id,
          'AWS_SECRET_ACCESS_KEY': restic_aws_secret_access_key,
          'AWS_DEFAULT_REGION': restic_aws_region
        } |
        combine({'AWS_S3_ENDPOINT': restic_s3_endpoint_url} if (restic_s3_endpoint_url is defined and restic_s3_endpoint_url) else {}) |
        combine({'AWS_CA_BUNDLE': restic_s3_ca_bundle} if (restic_s3_ca_bundle is defined and restic_s3_ca_bundle and restic_setup_selectel_ca | bool) else {})
      }}
  register: restic_test
  changed_when: false
  when: not ansible_check_mode 