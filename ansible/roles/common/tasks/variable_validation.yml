---
# Standardized variable validation system
# This provides consistent validation patterns across all roles
# Usage: include this task with variables:
#   - role_name: "prometheus" (required)
#   - required_variables: ["prometheus_domain", "prometheus_admin_password"] (required)
#   - sensitive_variables: ["prometheus_admin_password"] (optional - for security validation)
#   - conditional_variables: (optional - for advanced validation)
#       - condition: "prometheus_auth_enabled | default(false)"
#         variables: ["prometheus_admin_username", "prometheus_admin_password"]
#   - custom_validations: (optional - for complex validation rules)
#       - name: "prometheus_retention"
#         condition: "prometheus_retention is defined"
#         validation: "prometheus_retention | regex_search('^[0-9]+[dwmy]$')"
#         error_message: "prometheus_retention must be in format like '30d', '2w', '6m', '1y'"

- name: "Variable validation for {{ role_name | default('role') }}"
  block:
    - name: "Validate role_name parameter"
      ansible.builtin.assert:
        that:
          - role_name is defined
          - role_name != ""
        fail_msg: "role_name is required for variable validation"
        
    - name: "Validate required_variables parameter"
      ansible.builtin.assert:
        that:
          - required_variables is defined
          - required_variables | length > 0
        fail_msg: "required_variables list is required for variable validation"
        
    - name: "Check for required variables in {{ role_name }}"
      ansible.builtin.assert:
        that:
          - vars[required_var] is defined
          - vars[required_var] != ""
          - vars[required_var] != None
        fail_msg: |
          ❌ MISSING REQUIRED VARIABLE: {{ required_var }}

          Role: {{ role_name }}
          Missing Variable: {{ required_var }}

          This variable must be defined in:
          - Your playbook variables
          - Group variables (group_vars/)
          - Host variables (host_vars/)
          - Inventory variables
          - Extra variables (-e flag)

          Example in playbook:
          vars:
            {{ required_var }}: "your_value_here"

          Example in inventory:
          [your_group]
          your_host {{ required_var }}="your_value_here"

          Example with ansible-playbook:
          ansible-playbook -e "{{ required_var }}=your_value_here" playbook.yml
        quiet: false
      loop: "{{ required_variables }}"
      loop_control:
        loop_var: required_var
      
    - name: "Check for insecure default values in {{ role_name }}"
      ansible.builtin.assert:
        that:
          - vars[sensitive_var] != "changeme"
          - vars[sensitive_var] != "password"
          - vars[sensitive_var] != "admin123"
          - vars[sensitive_var] != "secret"
          - vars[sensitive_var] != "default"
        fail_msg: |
          ⚠️  INSECURE DEFAULT VALUE DETECTED: {{ sensitive_var }}

          Role: {{ role_name }}
          Variable: {{ sensitive_var }}
          Current Value: {{ vars[sensitive_var] }}

          This variable contains an insecure default value that must be changed for security.

          Please set a secure value for this variable:
          - Use a strong password/secret
          - Consider using Ansible Vault for sensitive data
          - Generate random values where appropriate

          Example with Ansible Vault:
          ansible-vault encrypt_string 'your_secure_value' --name '{{ sensitive_var }}'
        quiet: false
      loop: "{{ sensitive_variables | default([]) }}"
      loop_control:
        loop_var: sensitive_var
      when:
        - sensitive_variables is defined
        - vars[sensitive_var] is defined

    # Conditional variables validation removed - was causing syntax errors
    # Re-enable if needed with proper loop structure
        
    - name: "Perform custom validations for {{ role_name }}"
      when: custom_validations is defined
      block:
        - name: "Run custom validation for {{ custom_validation.name }}"
          ansible.builtin.assert:
            that:
              - "{{ custom_validation.validation }}"
            fail_msg: |
              ❌ VALIDATION FAILED: {{ custom_validation.name }}

              Role: {{ role_name }}
              Variable: {{ custom_validation.name }}
              Current Value: {{ vars[custom_validation.name] | default('undefined') }}

              {{ custom_validation.error_message }}
            quiet: false
          when: (custom_validation.condition | default(true)) | bool
          loop: "{{ custom_validations }}"
          loop_control:
            loop_var: custom_validation
        
  rescue:
    - name: "Handle variable validation failure for {{ role_name }}"
      include_tasks: failure_notification.yml
      vars:
        notification_type: "error"
        operation_name: "Variable validation for {{ role_name }}"
        error_message: "Required variables are missing or invalid"
        troubleshooting_steps:
          - "Review the error messages above for specific missing variables"
          - "Check your playbook, inventory, and variable files"
          - "Ensure all required variables are defined with valid values"
          - "Use 'ansible-inventory --list' to verify variable assignments"
          - "Consider using 'ansible-playbook --check' to validate before running"
          - "Review role documentation for variable requirements"
        should_fail: true
        
  always:
    - name: "Display variable validation summary for {{ role_name }}"
      ansible.builtin.debug:
        msg:
          - "=== Variable Validation Summary ==="
          - "Role: {{ role_name }}"
          - "Required Variables: {{ required_variables | length }} (✅ All present)"
          - "Sensitive Variables: {{ sensitive_variables | default([]) | length }} (✅ All secure)"
          - "Conditional Variables: 0 group(s) (disabled)"
          - "Custom Validations: {{ custom_validations | default([]) | length }} rule(s)"
          - "Status: ✅ All validations passed"
      when: show_validation_summary | default(true)
