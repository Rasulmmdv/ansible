---
# tasks file for node_exporter (systemd version)

- name: Setup Node Exporter
  block:
    - name: Ensure node_exporter user exists
      user:
        name: "{{ node_exporter_user }}"
        system: yes
        shell: /usr/sbin/nologin
        create_home: no
      become: true
      tags: [install]

    - name: Download node_exporter binary
      get_url:
        url: "{{ node_exporter_download_url }}"
        dest: "/tmp/node_exporter.tar.gz"
        mode: '0644'
        owner: root
        group: root
      become: true
      tags: [install]

    - name: Extract node_exporter binary
      unarchive:
        src: "/tmp/node_exporter.tar.gz"
        dest: "/tmp/"
        remote_src: yes
      become: true
      tags: [install]

    - name: Find and move node_exporter binary
      shell: |
        find /tmp -name "node_exporter" -type f -executable | head -1
      register: node_exporter_path
      become: true
      tags: [install]

    - name: Move node_exporter binary to /usr/local/bin
      copy:
        src: "{{ node_exporter_path.stdout }}"
        dest: "/usr/local/bin/node_exporter"
        mode: '0755'
        owner: root
        group: root
        remote_src: yes
      become: true
      tags: [install]

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/node_exporter.tar.gz"
        - "/tmp/node_exporter-{{ node_exporter_version }}.{{ node_exporter_arch }}"
      become: true
      tags: [install]

    - name: Create systemd service file for node_exporter
      copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Prometheus Node Exporter
          Wants=network-online.target
          After=network-online.target

          [Service]
          User={{ node_exporter_user }}
          Group={{ node_exporter_user }}
          Type=simple
          ExecStart=/usr/local/bin/node_exporter --web.listen-address={{ node_exporter_bind_address }}:{{ node_exporter_port }} {{ node_exporter_extra_args | default('') }}
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      become: true
      tags: [install, configure]

    - name: Reload systemd
      systemd:
        daemon_reload: yes
      become: true
      tags: [install, configure]

    - name: Enable and start node_exporter
      systemd:
        name: node_exporter
        state: started
        enabled: yes
      become: true
      tags: [install, configure]
  when: not ansible_check_mode

- name: Try to get monitoring network details
  command: docker network inspect {{ node_exporter_monitoring_network_name }}
  register: monitoring_network_inspect
  changed_when: false
  failed_when: false
  become: true
  when: node_exporter_service_discovery_enabled
  tags: [configure]

- name: Set node_exporter host IP and subnet facts (if network exists)
  set_fact:
    node_exporter_host_ip: "{{ (monitoring_network_inspect.stdout | from_json)[0].IPAM.Config[0].Gateway }}"
    node_exporter_monitoring_subnet: "{{ (monitoring_network_inspect.stdout | from_json)[0].IPAM.Config[0].Subnet }}"
  when: node_exporter_service_discovery_enabled and monitoring_network_inspect.stdout is defined and (monitoring_network_inspect.stdout | length) > 2
  tags: [configure]

# Create service discovery file for Prometheus (only on Prometheus host)
- name: Ensure Prometheus targets directory exists
  file:
    path: "{{ node_exporter_prometheus_config_dir }}/targets"
    state: directory
    owner: "{{ node_exporter_prometheus_user_id }}"
    group: "{{ node_exporter_prometheus_group_id }}"
    mode: '0755'
  become: true
  when: node_exporter_service_discovery_enabled and node_exporter_generate_prometheus_targets and not ansible_check_mode
  tags: [configure]

- name: Create node_exporter targets service discovery file
  template:
    src: node_exporter_targets.yml.j2
    dest: "{{ node_exporter_prometheus_config_dir }}/targets/node_exporter.yml"
    owner: "{{ node_exporter_prometheus_user_id }}"
    group: "{{ node_exporter_prometheus_group_id }}"
    mode: '0644'
  become: true
  when: node_exporter_service_discovery_enabled and node_exporter_generate_prometheus_targets and not ansible_check_mode
  tags: [configure]

# Firewall rules: allow from monitoring subnet if known
- name: Allow monitoring subnet to reach node_exporter (INPUT)
  iptables:
    action: insert
    chain: INPUT
    protocol: tcp
    destination_port: "{{ node_exporter_port }}"
    source: "{{ node_exporter_monitoring_subnet }}"
    jump: ACCEPT
    comment: "Allow monitoring subnet to reach node_exporter on the host."
  become: true
  when: node_exporter_manage_firewall and node_exporter_monitoring_subnet is defined and not ansible_check_mode
  tags: [configure]

# Firewall rules: allow explicit allowed sources
- name: Allow explicit sources to reach node_exporter (INPUT)
  iptables:
    action: insert
    chain: INPUT
    protocol: tcp
    destination_port: "{{ node_exporter_port }}"
    source: "{{ item }}"
    jump: ACCEPT
    comment: "Allow explicit source to reach node_exporter on the host."
  loop: "{{ node_exporter_allowed_sources }}"
  loop_control:
    label: "{{ item }}"
  become: true
  when: node_exporter_manage_firewall and node_exporter_allowed_sources | length > 0 and not ansible_check_mode
  tags: [configure] 